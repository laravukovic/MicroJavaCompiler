

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

import rs.ac.bg.etf.pp1.test.CompilerError;
import rs.ac.bg.etf.pp1.test.CompilerError.CompilerErrorType;

parser code {:
	List<CompilerError> compilerErrors = new ArrayList<CompilerError>();

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    private void reportError(int line, String message) {
		CompilerError ce = new CompilerError(line, message, CompilerErrorType.SYNTAX_ERROR);
		compilerErrors.add(ce);
	}
	
	public List<CompilerError> getErrors() {
		return compilerErrors;
	}
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
        if (info instanceof Symbol) {
        	reportError(((Symbol)info).left, message);
        }
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal String BOOLCONST;

terminal PROG;
terminal BREAK, RETURN, CONTINUE;
terminal CONST, VOID;
terminal RECORD, ENUM;
terminal CLASS, SUPER, THIS, EXTENDS, NEW;
terminal ELSE, IF, DO, WHILE;
terminal PRINT, READ;
terminal ADD, SUB;
terminal MUL, DIV, MOD;
terminal EQUALITY, NOEQUALITY, GREATER, GREATEREQ, LESS, LESSEQ;
terminal AND, OR;
terminal EQUAL;
terminal INC, DEC;
terminal SEMI, COMMA, DOT;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;
terminal LSQUARE, RSQUARE;
terminal DDOT;
terminal GOTO;
terminal BINARY;

nonterminal ParamDecl;
nonterminal ConstDecl, ConstAssign;
nonterminal VarDecl, OptSquare, VarDeclRest, VarDeclList;
nonterminal MethodDeclList;
nonterminal OptFormPars;
nonterminal FormPars, FormParamDecl;
nonterminal Label;
nonterminal Addop, Mulop, Assignop;
nonterminal StmtList;
nonterminal OptionalMinus;
nonterminal BinaryOp;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, DesignatorArrayName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodType, Term, Factor, Expr, Expresion;
nonterminal rs.etf.pp1.symboltable.concepts.Struct DesignatorStatement, Statement, Statements, SingleStatement;

Program ::= (Program) PROG ProgName:p ParamDecl LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

ParamDecl ::= (ConstParam) ParamDecl ConstDecl
			  |
			  (VarParam) ParamDecl VarDecl
			  |
			  /* epsilon */
			 ;

ConstDecl ::= (ConstDecl) CONST Type:constType ConstAssign SEMI;
			
ConstAssign ::= (SingleNumberConst) IDENT:constName EQUAL NUMBER:constVal
				|
				(MultiNumberConst) ConstAssign COMMA IDENT:constName EQUAL NUMBER:constVal
				|
				(SingleCharConst) IDENT:constName EQUAL CHARCONST:constVal
				|
				(MultiCharConst) ConstAssign COMMA IDENT:constName EQUAL CHARCONST:constVal
				|
				(SingleBoolConst )IDENT:constName EQUAL BOOLCONST:constVal
				|
				(MultiBoolConst) ConstAssign COMMA IDENT:constName EQUAL BOOLCONST:constVal
				;
				
VarDecl ::= (VarDeclaration) Type:varType IDENT:varName VarDeclRest SEMI
			|
			(VarDeclarationArray) Type:varType IDENT:varName LSQUARE RSQUARE VarDeclRest SEMI
			|
			error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji ", l);  :}
			|
			error COMMA:l
			{: parser.report_error("Izvrsen oporavak do , u liniji ", l);  :}
			;
			
VarDeclRest ::= (VarDeclMore) VarDeclRest COMMA IDENT:varName
				|
				(VarDeclArrayMore) VarDeclRest COMMA IDENT:varName LSQUARE RSQUARE
				|
				(NoVarDeclMore) /* epsilon */
				;
			
OptSquare ::= (Squares) LSQUARE RSQUARE
			  |
			  (NoSquares) /* epsilon */
			  ;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl) /* epsilon */
				; 

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				   |
				   (NoMethodDeclarations) /* epsilon */
				   ;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN OptFormPars RPAREN VarDeclList LBRACE StmtList RBRACE;

OptFormPars ::= (OptFormParams) FormPars
				|
				(NoFormPars) /* epsilon */
				;

FormPars ::= (FormParams) FormPars COMMA FormParamDecl
			 |
			 (NoFormParams) FormParamDecl
			 ;

FormParamDecl ::= (FormParam) Type:paramType IDENT:paramName	
				  |
				  (FormParamArray) Type:paramType IDENT:paramName LSQUARE RSQUARE	
				  ;

StmtList ::= (MultiStmtList) StmtList Statement
			 |
			 (NoStmt) /* epsilon */
			 ;

MethodTypeName ::= (MethodTypeName) MethodType:retType IDENT:methName;

MethodType ::= (MethodRetType) Type:type
			   |
			   (VoidRetType) VOID:type
			   ;

Type ::= (Type) IDENT:type;

Label ::= (Label) IDENT:labelname DDOT;

Addop ::= (AddOperator) ADD
		  |
		  (SubOperator) SUB
		  ;
		  
Mulop ::= (MulOperator) MUL 
		  |
		  (DivOperator) DIV
		  |
		  (ModOperator) MOD
		  ;

Assignop ::= (AssignOperator) EQUAL;

Expr ::= (BasicExpr) OptionalMinus Expresion:expr
		 |
		 (BinaryExpr) OptionalMinus Expresion BinaryOp OptionalMinus Expresion
		 ;

BinaryOp ::= (BinaryOperation) BINARY;
		 
OptionalMinus ::= (Minus) SUB
				  |
				  (NoMinus) /*epsilon*/
				  ;
		 
Expresion ::= (AddExpr) Expresion:term Addop Term:t
			  |
		      (TermExpr) Term:term
		      ;
		      
Term ::= (MulopTerm) Term:term Mulop Factor:factor
		 |
		 (FactorTerm) Factor:factor
		 ;
		 
Factor ::= 	(NumConst) NUMBER:numConst
			|
			(CharConst) CHARCONST:charConst
			|
			(BoolConst) BOOLCONST:boolConst
			|
			(NewArray) NEW Type:varType LSQUARE Expr:elemNum RSQUARE
			|
			(FactExpr) LPAREN Expr RPAREN
			|
			(Var) Designator:varName
			;
			
Designator ::= (DesBasic) IDENT:varName
			   |
			   (DesArray) DesignatorArrayName LSQUARE Expr:arrayIndex RSQUARE
			   ;
			   
DesignatorArrayName ::= (DesignatorArrayName) IDENT:varName;

SingleStatement ::= (ReadStmt) READ LPAREN Designator RPAREN SEMI
					|
					(PrintStmt) PRINT LPAREN Expr RPAREN SEMI
					|
					(PrintStmtwithNumber) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
					;

					
DesignatorStatement ::= (DesAssign) Designator:varName Assignop Expr:val
						|
						(VarInc) Designator:varName INC
						|
						(VarDec) Designator:varName DEC
						|
						error SEMI:l
		   				{: parser.report_error("Izvrsen oporavak do ; u liniji ", l);  :}
						;

Statement ::= (DesStmt) DesignatorStatement SEMI
			  |
			  (SingleStmtLabel) Label DDOT SingleStatement
			  |
			  (SingleStmtLabelNoLabel) SingleStatement
			  |
			  (StmNoLabel) Statements
			  ;  
			  
Statements ::= (MultiStatements) LBRACE StmtList RBRACE;

